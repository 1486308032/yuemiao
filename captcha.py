import base64
from Cryptodome.Cipher import AES


# import json
# import random
# from binascii import b2a_hex, a2b_hex

def b64ToImage(data=None):
    image = {
        "secretKey": "EC0bNq7knDiSjPRt",
        "originalImageBase64": "\u003d",
        "jigsawImageBase64": "iVBORw0KGgoAAAANSUhEUgAAAF4AAAE2CAYAAADoAiXtAAADOElEQVR4Xu3Sba6bOhiF0c5/Vp1GJ9PKiqy4LyQH/BGws5a0f1ydAPZz++sXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKzn7xvxt3SQ4/7+s79SfJZK74LHid/Jmejid1ITvYwf38cBLdFzePErtIYXv0KP6Hmt4Z//+9rfdXvpgjFg7WpilaHju7L4zBLihVt2NNTzl9t3xJXie6Z25PJn9ipQGTA+c2RZfO+0akO8Whno+V/b39Usi3eYUs8weSPemZfEO0xrVKQRy+IdpjRT+LSlws8Uf5nwyWzhl4k/U/g04S/a9OEfV3iIl7vzsnifW3see3uhmTZF+FVil7tt+BVjl8vivS+zcuy424T/luB5twj/bdHTLg//TdFLscNHfUv0W8QurR7+dsGTb4ge73wLK4e/bfRk1fC3jp6sGP720RPhL7Ja+CmiJ4+jbi8w66YJnwh/EeEv8jju9hIzbqrwifAXEf4ijyNvLzLbsni/W1shfNp08VcJnzZd+FXiZ/GOt7VK+LTW+K3Pn7JS+LRSvOue8vf5+fibruIHV9ueeO9k77nYqtm7D66+o/fOYrsqRz9qj3UJL/j5NYcXvW5Z7HmI6G2rCi96+4S/aFls+5bwfXYqvOj9JvxFE/7ixca7Vgv/SvzdyMXGu644WO+V4v2S8u/x2RGL33/pUwcasVex93wqfvzuS584zIidiZ7l+CPufPo8ow4ycqcvGYy4b9WZZopfdcFgxH2rz1V7mFL824gl8ew1ep65+Uz5MFn8QPmhrHw2/q73yu/10OPMsUOz5yu34m+T/Ld4sJ579e1areftfZ5qrRf5ab0v+njj9js/LYvvu0zNJY5u1EWPnrkU33G5fLB46B4bdel35y3F527n3UVaNyJADlt+I4u/vbXyEr03Ksa0sUv5AjFaj00d5hOEv8iof/VZ/B6FEeHThP+B8Bd5JNqGa10Wv0dhRPg04X+Q/3XGcDUrxe+wI8eKIY+sFN/LAWXAGDeuFN9Dpf+z7ovPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATOwfzYslC2OZzFkAAAAASUVORK5CYII\u003d",
        "token": "8eb3f0d66ef24012a97006ad44e044545",
        "result": False
    }
    if data is not None:
        image = data
    origina = image["originalImageBase64"]
    jigsaw = image["jigsawImageBase64"]
    image_data = base64.b64decode(origina)
    image_data2 = base64.b64decode(jigsaw)
    with open('1.png', 'wb') as f:
        f.write(image_data)
    with open('2.png', 'wb') as f:
        f.write(image_data2)


def dePoint(point_str=None, key=None):
    point_str = point_str.encode("utf8")
    point_str = base64.b64decode(point_str)
    # if key is None:
    #     key = "EC0bNq7knDiSjPRt"
    aes = AES.new(key.encode("utf-8"), AES.MODE_ECB)
    point_str = aes.decrypt(point_str)  # 解密
    print("解码坐标ALL：", point_str, "密钥：", key)
    try:
        point_str[int(point_str[-1])]
        point_str = point_str[:-int(point_str[-1])]
    except:
        pass
    finally:
        point_str = point_str.decode("utf8")
        # print("解码坐标：", point_str, "密钥：", key)
    return point_str


def enPoint(point_str=None, key=None, block_size=16):
    # if key == None:
    #     key = "EC0bNq7knDiSjPRt"
    # if point_str == None:
    #     point_str = 265.7142857142857
    aes = AES.new(key.encode("utf-8"), AES.MODE_ECB)
    """
    with open("./1.txt", "w") as f:
        # raw_text = f.read().encode("utf8")
        num = random.uniform(0.1111111111111, 0.1115111111111)
        point_str = ("%.13f") % (float(point_str) + num)
        # print("验证码X坐标", point_str)
        raw_text = {"x": float(point_str) , "y": 5}
        raw_text = json.dumps(raw_text, separators=(',', ':'))  # python会加入空格，影响结果
        f.write(raw_text)
        raw_text = raw_text.encode("utf8")
        print("Raw编码后：", raw_text)
        # print(len(raw_text))
    """
    raw_text = point_str.encode("utf8")
    if (len(raw_text) % block_size != 0):
        print("开始填充Padding")
        pl = block_size - (len(raw_text) % block_size)
        padding = bytearray([pl for i in range(pl)])  # 填充字符
        raw_text += padding
    en_text = aes.encrypt(raw_text)  # AES加密文本
    en_text = base64.b64encode(en_text).decode("utf8")  # Base64加密
    print("加密文本：", en_text, "密钥：", key)
    dePoint(en_text, key)
    return en_text


if __name__ == '__main__':
    print("验证码")
    b64ToImage()
